// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: expenses.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (user_id, sub_category_id, expense_date, amount, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at
`

type CreateExpenseParams struct {
	UserID        int32
	SubCategoryID pgtype.Int4
	ExpenseDate   pgtype.Date
	Amount        pgtype.Numeric
	Description   pgtype.Text
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, createExpense,
		arg.UserID,
		arg.SubCategoryID,
		arg.ExpenseDate,
		arg.Amount,
		arg.Description,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.ExpenseDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses
WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteExpense, id)
	return err
}

const getAllExpenses = `-- name: GetAllExpenses :many
SELECT id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at FROM expenses WHERE user_id = $1 ORDER BY expense_date DESC
`

func (q *Queries) GetAllExpenses(ctx context.Context, userID int32) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getAllExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SubCategoryID,
			&i.ExpenseDate,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpense = `-- name: GetExpense :one
SELECT id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at FROM expenses WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpense(ctx context.Context, id int32) (Expense, error) {
	row := q.db.QueryRow(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.ExpenseDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses
SET sub_category_id = $2,
	expense_date = $3,
	amount = $4,
	description = $5,
	updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at
`

type UpdateExpenseParams struct {
	ID            int32
	SubCategoryID pgtype.Int4
	ExpenseDate   pgtype.Date
	Amount        pgtype.Numeric
	Description   pgtype.Text
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, updateExpense,
		arg.ID,
		arg.SubCategoryID,
		arg.ExpenseDate,
		arg.Amount,
		arg.Description,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.ExpenseDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
